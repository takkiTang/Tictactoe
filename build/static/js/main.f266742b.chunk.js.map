{"version":3,"sources":["index.js"],"names":["Cell","props","className","onClick","text","ReactDOM","render","useState","Array","fill","cells","setCells","count","setCount","staus","setStaus","win","setWin","judge","row","col","every","v","map","items","filter","item","flat","key","newVal","JSON","parse","stringify","onClickCell","document","getElementById"],"mappings":"6NAIA,SAASA,EAAKC,GACV,OACI,yBAAKC,UAAU,OAAOC,QAASF,EAAME,SAAWF,EAAMG,MAmG9DC,IAASC,OAAO,6BAAK,mBA9FrB,WAAuB,IAAD,EACMC,mBAAS,IAAIC,MAAM,GAAGC,KAAK,IAAID,MAAM,GAAGC,SAD9C,mBACbC,EADa,KACNC,EADM,OAEMJ,mBAAS,GAFf,mBAEbK,EAFa,KAENC,EAFM,OAGMN,oBAAS,GAHf,mBAGbO,EAHa,KAGNC,EAHM,OAIER,mBAAS,IAJX,mBAIbS,EAJa,KAIRC,EAJQ,KAcZC,EAAQ,SAACR,EAAOS,EAAKC,EAAKhB,GAE5B,GAAIM,EAAMS,GAAKE,OAAM,SAAAC,GAAC,OAAIA,IAAMlB,KAG5B,OAFAW,GAAS,QACTE,EAAOb,GAIX,GAAIM,EAAMW,OAAM,SAAAC,GAAC,OAAIA,EAAEF,KAAShB,KAG5B,OAFAW,GAAS,QACTE,EAAOb,GAKX,GAAIe,EAAMC,IAAQ,GACJV,EAAMa,KAAI,SAACC,EAAOL,GAAR,OAChBK,EAAMC,QAAO,SAACC,EAAMN,GAAP,OACTD,EAAMC,IAAQ,QAEpBO,KAAK,GACCN,OAAM,SAAAC,GAAC,OAAIA,IAAMlB,KAGrB,OAFAW,GAAS,QACTE,EAAOb,GAMf,GAAIe,EAAMC,IAAQ,GACJV,EAAMa,KAAI,SAACC,EAAOL,GAAR,OAChBK,EAAMC,QAAO,SAACC,EAAMN,GAAP,OACTD,EAAMC,IAAQ,QAEpBO,KAAK,GACCN,OAAM,SAAAC,GAAC,OAAIA,IAAMlB,KAGrB,OAFAW,GAAS,QACTE,EAAOb,GAIf,OAAc,IAAVQ,GACAG,GAAS,QACTE,EAAO,YAFX,GAaJ,OACI,6BACI,yBAAKf,UAAU,OAAf,eACA,yBAAKA,UAAU,OACVQ,EAAMa,KAAI,SAACC,EAAOL,GAAR,OACP,yBAAKjB,UAAU,MAAM0B,IAAKT,EAAM,OAC3BK,EAAMD,KAAI,SAACG,EAAMN,GAAP,OACP,kBAACpB,EAAD,CAAM4B,IAAKR,EAAM,OAAQhB,KAAMsB,EAAMvB,QAAS,kBAtElD,SAACgB,EAAKC,GACtB,IAAKV,EAAMS,GAAKC,GAAM,CAClBP,IAAWD,GACX,IAAMiB,EAASC,KAAKC,MAAMD,KAAKE,UAAUtB,IACzCmB,EAAOV,GAAKC,GAAe,EAARR,EAAY,IAAM,IACrCD,EAASkB,GACTX,EAAMW,EAAQV,EAAKC,EAAKS,EAAOV,GAAKC,KAgEgCa,CAAYd,EAAKC,cAMjFN,GACA,yBAAKZ,UAAU,QACVc,GAAO,4CAASA,EAAT,uBACNA,GAAO,yDACT,yBAAKd,UAAU,SAASC,QAxB3B,WACTQ,EAAS,IAAIH,MAAM,GAAGC,KAAK,IAAID,MAAM,GAAGC,SACxCI,EAAS,GACTE,GAAS,GACTE,EAAO,MAoBK,gCASC,MAAL,MAAwCiB,SAASC,eAAe,W","file":"static/js/main.f266742b.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css'\n\nfunction Cell(props) {\n    return (\n        <div className=\"cell\" onClick={props.onClick} >{props.text}</div>\n    )\n}\n\n\nfunction Chessborad() {\n    let [cells, setCells] = useState(new Array(3).fill(new Array(3).fill()))\n    let [count, setCount] = useState(0)\n    let [staus, setStaus] = useState(false)\n    let [win, setWin] = useState('')\n    const onClickCell = (row, col) => {\n        if (!cells[row][col]) {\n            setCount(++count)\n            const newVal = JSON.parse(JSON.stringify(cells))\n            newVal[row][col] = count & 1 ? 'x' : 'o'\n            setCells(newVal)\n            judge(newVal, row, col, newVal[row][col])\n        }\n    }\n    const judge = (cells, row, col, text) => {\n        // 横\n        if (cells[row].every(v => v === text)) {\n            setStaus(true)\n            setWin(text)\n            return\n        }\n        // 竖\n        if (cells.every(v => v[col] === text)) {\n            setStaus(true)\n            setWin(text)\n            return\n\n        }\n        // 反斜\n        if (row - col === 0) {\n            let arr = cells.map((items, row) =>\n                items.filter((item, col) =>\n                    row - col === 0\n                )\n            ).flat(1)\n            if (arr.every(v => v === text)) {\n                setStaus(true)\n                setWin(text)\n                return\n\n            }\n        }\n        // 正斜\n        if (row + col === 2) {\n            let arr = cells.map((items, row) =>\n                items.filter((item, col) =>\n                    row + col === 2\n                )\n            ).flat(1)\n            if (arr.every(v => v === text)) {\n                setStaus(true)\n                setWin(text)\n                return\n            }\n        }\n        if (count === 9) {\n            setStaus(true)\n            setWin(null)\n            return \n        }\n    }\n    const init = () => {\n        setCells(new Array(3).fill(new Array(3).fill()))\n        setCount(0)\n        setStaus(false)\n        setWin('')\n    }\n\n    return (\n        <div>\n            <div className=\"tip\">tic tac toe</div>\n            <div className=\"row\">\n                {cells.map((items, row) =>\n                    <div className=\"col\" key={row + 'row'}>\n                        {items.map((item, col) =>\n                            <Cell key={col + 'cell'} text={item} onClick={() => onClickCell(row, col)} ></Cell>\n                        )}\n                    </div>\n                )}\n            </div>\n            {\n                staus &&\n                <div className=\"mask\">\n                    {win && <div >恭喜{win}赢了！</div>}\n                    {!win && <div >双方平局</div>}\n                    <div className=\"button\" onClick={init}>重新开始</div>\n                </div>\n            }\n        </div>\n    )\n}\n\n\n\nReactDOM.render(<div><Chessborad></Chessborad>  </div>, document.getElementById('root'));\n\n"],"sourceRoot":""}